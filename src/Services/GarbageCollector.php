<?php

namespace DT\Home\Services;

use DT\Home\Sources\AppSource;
use DT\Home\Sources\FilterApps;
use DT\Home\Sources\SettingsApps;
use DT\Home\Sources\UserApps;
use function DT\Home\container;

/**
 * Listen for actions to garbage collect stale apps.
 */
class GarbageCollector {

    public function __construct()
    {
        add_action( 'dt_home_app_aggregate', [ $this, 'process_aggregation' ] );
    }

    /**
     * Process aggregated app results and garbage collect any stale apps.
     *
     * @param array $sources The sources to process.
     * @param array $params The optional parameters for processing.
     */
    public function process_aggregation( array $sources, array $params = [] ) {
        // Handle settings app aggregation.
        if ( in_array( SettingsApps::class, $sources ) ) {
            $this->delete_stale_filter_apps_from(
                container()->get( SettingsApps::class ),
                $params
            );
        }

        // Handle user app aggregation.
        if ( in_array( UserApps::class, $sources ) ) {
            $this->delete_stale_filter_apps_from(
                container()->get( UserApps::class ),
                $params
            );
        }
    }

    /**
     * Delete any stale filter apps from the specified source.
     * @var UserApps $source
     * @var array $params
     */
    private function delete_stale_filter_apps_from( AppSource $source, array $params ) {
        $filtered_apps_source = container()->get( FilterApps::class );
        $db_apps = $source->all( $params );
        $filtered_apps = $filtered_apps_source->all( $params );

        // Identify coded apps currently stored within db.
        $db_coded_apps = array_filter($db_apps, function ( $app ) {
            return ( isset( $app['creation_type'] ) && ( $app['creation_type'] === 'code' ) );
        });

        // Identify coded apps currently generated by filters.
        $filtered_coded_apps = array_filter($filtered_apps, function ( $app ) {
            return ( isset( $app['creation_type'] ) && ( $app['creation_type'] === 'code' ) );
        });

        // Identify db coded apps, no longer generated by filter call.
        $diff_coded_apps = array_udiff($db_coded_apps, $filtered_coded_apps, function ( $a, $b ) {
            return strcmp( ( $a['slug'] ?? '' ), ( $b['slug'] ?? '' ) );
        });

        // Remove any identified stale coded apps from db.
        if ( !empty( $diff_coded_apps ) ) {

            // Unset based on original keys.
            foreach ( $diff_coded_apps as $key => $app ) {
                unset( $db_apps[$key] );
            }

            // Reindex array elements and persist changes to db.
            $source->save( $db_apps, $params );
        }
    }
}
